using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Configuration;
using System.IO;
using System.Linq;
using System.Reactive.Concurrency;
using System.Reactive.Linq;
using System.Reactive.Subjects;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using ChatSharp;
using ChatSharp.Events;
using Ninject;
using Ninject.Modules;
using Topshelf;
using Topshelf.Ninject;

namespace IrcExploitChecker.App
{
    class Program
    {
        static int Main(string[] args)
        {
            var modules = DiscoverModules();

            var exitCode = HostFactory.Run
            (
                c =>
                {
                    c.UseNinject(modules);
                    c.Service<Service>
                    (
                        sc =>
                        {
                            sc.ConstructUsingNinject();
                            sc.WhenStarted<Service>(service => service.Start());
                            sc.WhenStopped<Service>(service => service.Stop());
                        }
                    );

                    c.SetServiceName("IrcExploitChecker");
                    c.SetDisplayName("IRC Exploit Checker");
                    c.SetDescription("Keeps your channels free from various exploits");

                    c.EnableShutdown();

                    c.RunAsLocalSystem();
                }
            );

            return (int)exitCode;
        }

        private static NinjectModule[] DiscoverModules()
        {
            var modules = new List<NinjectModule>();

            foreach (var assembly in AppDomain.CurrentDomain.GetAssemblies())
            {
                var ninjectModuleType = typeof(NinjectModule);

                foreach (var type in assembly.GetTypes())
                {
                    if (ninjectModuleType.IsAssignableFrom(type) && !type.IsAbstract)
                    {
                        modules.Add((NinjectModule)Activator.CreateInstance(type));
                    }
                }
            }

            return modules.ToArray();
        }
    }
}