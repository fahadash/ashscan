using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Configuration;
using System.IO;
using System.Linq;
using System.Reactive.Concurrency;
using System.Reactive.Linq;
using System.Reactive.Subjects;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using ChatSharp;
using ChatSharp.Events;
using ExploitChecker;
using ExploitChecker.Contracts;
using Topshelf;

namespace IrcExploitChecker
{
    using Contracts;

    namespace App
    {
        using Properties;

        public class Service
        {
            private bool beVerbose;

            private IEnumerable<string> ignoredChannels;

            private IEnumerable<string> watchedChannels;

            private IEnumerable<string> botOperators;

            private readonly IBlackListedHostProvider blackListedHostProvider;

            private readonly IAbusiveWordProvider abusiveWordProvider;

            private readonly IMessageQueueContainer messageQueueContainer;

            private readonly IIrcClientProvider ircClientProvider;

            private readonly IHostExploitChecker hostExploitChecker;

            private readonly INickExploitChecker nickExploitChecker;

            private readonly ITextExploitChecker textExploitChecker;

            public Service(IBlackListedHostProvider blackListedHostProvider, IAbusiveWordProvider abusiveWordProvider, IMessageQueueContainer messageQueueContainer, IIrcClientProvider ircClientProvider, IHostExploitChecker hostExploitChecker, INickExploitChecker nickExploitChecker, ITextExploitChecker textExploitChecker)
                : base()
            {
                this.beVerbose = Settings.Default.BeVerbose;
                this.ignoredChannels = new[]
                {
                    Settings.Default.ReportingChannel
                };
                this.watchedChannels = Settings.Default.WatchedChannels.Split(',').Where(c => c.StartsWith("#"));
                this.botOperators = Settings.Default.BotOperators.Split(',').Select(o => o.Trim());

                this.blackListedHostProvider = blackListedHostProvider;
                this.abusiveWordProvider = abusiveWordProvider;
                this.messageQueueContainer = messageQueueContainer;
                this.messageQueueContainer.MessageDequeued += HandleMessageQueueContainerMessageDequeued;
                this.ircClientProvider = ircClientProvider;
                this.ircClientProvider.IrcClient.ConnectionComplete += HandleClientConnectionCompleteEvent;
                this.ircClientProvider.IrcClient.RawMessageRecieved += HandleRawMessageReceived;
                this.ircClientProvider.IrcClient.UserMessageRecieved += HandleUserMessageReceived;
                this.ircClientProvider.IrcClient.UserJoinedChannel += HandleUserJoinedChannel;
                this.hostExploitChecker = hostExploitChecker;
                this.nickExploitChecker = nickExploitChecker;
                this.textExploitChecker = textExploitChecker;
            }

            private void HandleMessageQueueContainerMessageDequeued(object sender, MessageQueueEventArgs e)
            {
                IrcClientProvider.IrcClient.SendRawMessage(e.Message);
            }

            protected IBlackListedHostProvider BlackListedHostProvider
            {
                get
                {
                    return this.blackListedHostProvider;
                }
            }

            protected IAbusiveWordProvider AbusiveWordProvider
            {
                get
                {
                    return this.abusiveWordProvider;
                }
            }

            protected IMessageQueueContainer MessageQueueContainer
            {
                get
                {
                    return this.messageQueueContainer;
                }
            }

            protected IIrcClientProvider IrcClientProvider
            {
                get
                {
                    return this.ircClientProvider;
                }
            }

            protected IHostExploitChecker HostExploitChecker
            {
                get
                {
                    return this.hostExploitChecker;
                }
            }

            protected INickExploitChecker NickExploitChecker
            {
                get
                {
                    return this.nickExploitChecker;
                }
            }

            protected ITextExploitChecker TextExploitChecker
            {
                get
                {
                    return this.textExploitChecker;
                }
            }

            public void Start()
            {
                IrcClientProvider.IrcClient.ConnectAsync();
            }

            public void Stop()
            {
                MessageQueueContainer.Dispose();

                // NOTE : put this in a try/catch block because we have no way of checking whether the IRC client is connected
                //        and it throws an exception on calling Quit if it isn't connected -- Diabolic 17/03/2015
                try
                {
                    IrcClientProvider.IrcClient.Quit();
                }
                catch
                {
                }
            }

            private void HandleClientConnectionCompleteEvent(object sender, EventArgs e)
            {
                var client = sender as IrcClient;

                if (client != null)
                {
                    client.JoinChannel(Settings.Default.ReportingChannel);

                    MessageQueueContainer.Enqueue(":MODE {0} +iRCB-ws", Settings.Default.Nick);
                    MessageQueueContainer.Enqueue("NickServ IDENTIFY {0}",  Settings.Default.NickservPassword);

                    // TODO : remove the Thread.Sleep; replace with asynchronous code in an appropriate event -- Diabolic 15/03/2015
                    Thread.Sleep(100);

                    this.watchedChannels.ToList().ForEach(client.JoinChannel);
                }
            }

            private void HandleRawMessageReceived(object sender, RawMessageEventArgs e)
            {
                Console.WriteLine(e.Message);
            }

            private void HandleUserMessageReceived(object sender, PrivateMessageEventArgs e)
            {
                var client = sender as IrcClient;

                if (client != null)
                {
                    try
                    {
                        if (e.PrivateMessage != null)
                        {
                            if (this.botOperators.Any(x => string.Equals(x, e.PrivateMessage.User.Nick, StringComparison.OrdinalIgnoreCase)))
                            {
                                var split = e.PrivateMessage.Message.Split(' ');

                                switch (split[0].ToLower())
                                {
                                    case "join":
                                        #region handle join
                                        client.JoinChannel(split[1]);
                                        #endregion
                                        break;

                                    case "part":
                                        #region handle part
                                        client.PartChannel(split[1]);
                                        #endregion
                                        break;

                                    case "check":
                                        #region handle check
                                        {
                                            var exploitTypes = HostExploitChecker.Check(() => split[1]);
                                            var exploitString = exploitTypes.Aggregate(new StringBuilder(), (sb, et) => sb.AppendFormat("{0},", et.ToString())).ToString();

                                            client.Channels[Settings.Default.ReportingChannel].SendMessage
                                            (
                                                string.Format
                                                (
                                                    "Manual check requested by {0}, Host {1}, Exploits: {2}",
                                                    e.PrivateMessage.User.Nick,
                                                    split[1],
                                                    exploitString
                                                )
                                            );

                                            MessageQueueContainer.Enqueue("PRIVMSG " + e.PrivateMessage.User.Nick + " :" + exploitString);
                                        }
                                        #endregion
                                        break;

                                    case "tolerance":
                                        #region handle tolerance
                                        {
                                            if (split.Length > 1)
                                            {
                                                var newlevel = 0;

                                                if (!int.TryParse(split[1], out newlevel) || newlevel < 0 || newlevel > 10)
                                                {
                                                    MessageQueueContainer.Enqueue(string.Format("PRIVMSG {0} :Invalid level. Choose between 0-10", e.PrivateMessage.User.Nick));
                                                }
                                                else
                                                {
                                                    Settings.Default.ToleranceLevel = newlevel;
                                                    Settings.Default.Save();

                                                    MessageQueueContainer.Enqueue(string.Format("PRIVMSG {0} :Current Tolerance level is now set to: {1}", e.PrivateMessage.User.Nick, Settings.Default.ToleranceLevel));
                                                }
                                            }
                                            else
                                            {
                                                MessageQueueContainer.Enqueue(string.Format("PRIVMSG {0} :Current Tolerance level is: {1}", e.PrivateMessage.User.Nick, Settings.Default.ToleranceLevel));
                                            }
                                        }
                                        #endregion
                                        break;

                                    case "blacklisthosts":
                                        #region handle blacklisthosts
                                        if (split.Length > 2)
                                        {
                                            switch (split[1].ToLower())
                                            {
                                                case "add":
                                                    if (BlackListedHostProvider.Contains(split[2]))
                                                    {
                                                        MessageQueueContainer.Enqueue(string.Format("PRIVMSG {0} :Host already exists.", e.PrivateMessage.User.Nick));
                                                    }
                                                    else
                                                    {
                                                        BlackListedHostProvider.Add(split[2]);

                                                        MessageQueueContainer.Enqueue(string.Format("PRIVMSG {0} :Host successfully added.", e.PrivateMessage.User.Nick));
                                                    }
                                                    break;

                                                case "remove":
                                                    if (!BlackListedHostProvider.Contains(split[2]))
                                                    {
                                                        MessageQueueContainer.Enqueue(string.Format("PRIVMSG {0} :Host does not exist.", e.PrivateMessage.User.Nick));
                                                    }
                                                    else
                                                    {
                                                        BlackListedHostProvider.Remove(split[2]);

                                                        MessageQueueContainer.Enqueue(string.Format("PRIVMSG {0} :Host successfully removed.", e.PrivateMessage.User.Nick));
                                                    }
                                                    break;

                                                case "reload":
                                                    BlackListedHostProvider.Reload();

                                                    MessageQueueContainer.Enqueue(string.Format("PRIVMSG {0} :Black-listed hosts list reloaded.", e.PrivateMessage.User.Nick));
                                                    break;

                                                case "flush":
                                                    BlackListedHostProvider.Flush();

                                                    MessageQueueContainer.Enqueue(string.Format("PRIVMSG {0} :Black-listed hosts list flushed.", e.PrivateMessage.User.Nick));
                                                    break;
                                            }
                                        }
                                        #endregion
                                        break;

                                    case "abusivewords":
                                        #region handle abusivewords
                                        if (split.Length > 2)
                                        {
                                            switch (split[1])
                                            {
                                                case "add":
                                                    if (AbusiveWordProvider.Contains(split[2]))
                                                    {
                                                        MessageQueueContainer.Enqueue(string.Format("PRIVMSG {0} :Word already exists.", e.PrivateMessage.User.Nick));
                                                    }
                                                    else
                                                    {
                                                        AbusiveWordProvider.Add(split[2]);

                                                        MessageQueueContainer.Enqueue(string.Format("PRIVMSG {0} :Word successfully added.", e.PrivateMessage.User.Nick));
                                                    }
                                                    break;

                                                case "remove":
                                                    if (!AbusiveWordProvider.Contains(split[2]))
                                                    {
                                                        MessageQueueContainer.Enqueue(string.Format("PRIVMSG {0} :Host does not exist.", e.PrivateMessage.User.Nick));
                                                    }
                                                    else
                                                    {
                                                        AbusiveWordProvider.Remove(split[2]);

                                                        MessageQueueContainer.Enqueue(string.Format("PRIVMSG {0} :Word successfully removed.", e.PrivateMessage.User.Nick));
                                                    }
                                                    break;

                                                case "reload":
                                                    AbusiveWordProvider.Reload();

                                                    MessageQueueContainer.Enqueue(string.Format("PRIVMSG {0} :Abusive words list reloaded.", e.PrivateMessage.User.Nick));
                                                    break;

                                                case "flush":
                                                    AbusiveWordProvider.Flush();

                                                    MessageQueueContainer.Enqueue(string.Format("PRIVMSG {0} :Abusive words list flushed.", e.PrivateMessage.User.Nick));
                                                    break;
                                            }
                                        }
                                        #endregion
                                        break;

                                    case "verbose":
                                        #region handle verbose
                                        if (string.IsNullOrEmpty(split[1]))
                                        {
                                            if (split[1] == "off")
                                            {
                                                this.beVerbose = false;
                                            }
                                            else
                                            {
                                                this.beVerbose = true;
                                            }
                                        }
                                        #endregion
                                        break;

                                    case "reload":
                                        #region handle reload
                                        BlackListedHostProvider.Reload();
                                        AbusiveWordProvider.Reload();

                                        MessageQueueContainer.Enqueue(string.Format("PRIVMSG {0} :Lists reloaded.", e.PrivateMessage.User.Nick));
                                        #endregion
                                        break;

                                    case "flush":
                                        #region handle reload
                                        BlackListedHostProvider.Flush();
                                        AbusiveWordProvider.Flush();

                                        MessageQueueContainer.Enqueue(string.Format("PRIVMSG {0} :Lists flushed.", e.PrivateMessage.User.Nick));
                                        #endregion
                                        break;

                                    case "ban":
                                        #region handle ban
                                        if (split.Length == 3 && split[1].StartsWith("#"))
                                        {
                                            client.WhoIs
                                            (
                                                split[2],
                                                whois =>
                                                {
                                                    if (whois != null && whois.User != null && !string.IsNullOrWhiteSpace(whois.User.Hostname))
                                                    {
                                                        MessageQueueContainer.Enqueue(string.Format("MODE {0} +b *!*@{1}", split[1], whois.User.Hostname));
                                                    }
                                                }
                                            );
                                        }
                                        #endregion
                                        break;

                                    case "unban":
                                        #region handle unban
                                        if (split.Length == 3 && split[1].StartsWith("#"))
                                        {
                                            client.WhoIs
                                            (
                                                split[2],
                                                whois =>
                                                {
                                                    if (whois != null && whois.User != null && !string.IsNullOrWhiteSpace(whois.User.Hostname))
                                                    {
                                                        MessageQueueContainer.Enqueue(string.Format("MODE {0} -b *!*@{1}", split[1], whois.User.Hostname));
                                                    }
                                                }
                                            );
                                        }
                                        #endregion
                                        break;

                                    case "voice":
                                        #region handle voice
                                        if (split.Length == 3 && split[1].StartsWith("#"))
                                        {
                                            MessageQueueContainer.Enqueue(string.Format("MODE {0} +v {1}", split[1], split[2]));
                                        }
                                        #endregion
                                        break;

                                    case "devoice":
                                        #region handle devoice
                                        if (split.Length == 3 && split[1].StartsWith("#"))
                                        {
                                            MessageQueueContainer.Enqueue(string.Format("MODE {0} -v {1}", split[1], split[2]));
                                        }
                                        #endregion
                                        break;

                                    case "kick":
                                        #region handle kick
                                        if (split.Length >= 3 && split[1].StartsWith("#"))
                                        {
                                            var reason = split.Length > 3 ? string.Join(" ", split.Skip(3)) : Settings.Default.KickReason;
                                            var chan = client.Channels.FirstOrDefault(c => string.Compare(c.Name, split[1], StringComparison.OrdinalIgnoreCase) == 0);

                                            if (chan != null)
                                            {
                                                if (chan.UsersByMode.ContainsKey('o') && chan.UsersByMode['o'].Any(u => string.Compare(u.Nick, client.User.Nick, StringComparison.OrdinalIgnoreCase) == 0))
                                                {
                                                    chan.Kick(split[2], reason);
                                                }
                                                else
                                                {
                                                    MessageQueueContainer.Enqueue(string.Format("PRIVMSG {0} :I am not an op there.", e.PrivateMessage.User.Nick));
                                                }
                                            }
                                        }
                                        #endregion
                                        break;
                                }
                            }
                        }
                    }
                    catch
                    {
                        // TODO : log exception -- Diabolic 15/03/2015
                    }
                }
            }

            private void HandleUserJoinedChannel(object sender, ChannelUserEventArgs e)
            {
                var client = sender as IrcClient;

                if (!this.ignoredChannels.Contains(e.Channel.Name.ToLower()))
                {
                    var hostExploitTypes = HostExploitChecker.Check(() => e.User.Hostname);
                    var nickExploitTypes = NickExploitChecker.Check(() => e.User.Nick);

                    var exploitTypes = hostExploitTypes.Union(nickExploitTypes).Distinct();

                    var exploitsString = string.Empty;

                    exploitsString = exploitTypes.Aggregate(new StringBuilder(), (sb, et) => sb.AppendFormat("{0}, ", et.ToString())).ToString();
                    exploitsString = exploitsString.ToString().TrimEnd(',', ' ');

                    if (this.beVerbose || exploitTypes.Any())
                    {
                        var untoleratedExploitTypes = GetUntoleratedExploitTypes();

                        if (exploitTypes.Any(untoleratedExploitTypes.Contains))
                        {
                            MessageQueueContainer.Enqueue
                            (
                                string.Format
                                (
                                    "PRIVMSG {0} :KICK Trigger: in {1}, Nick: {2}, Host {3}, Exploits: {4}",
                                    Settings.Default.ReportingChannel,
                                    e.Channel.Name,
                                    e.User.Nick,
                                    e.User.Hostname,
                                    exploitTypes.Any() ? exploitsString : "None"
                                )
                            );

                            if (e.Channel != null && e.Channel.UsersByMode.ContainsKey('o') && e.Channel.UsersByMode['o'].Any(x => x.Nick == client.User.Nick))
                            {
                                client.SendRawMessage("MODE {0} +b *!*@{1}", e.Channel.Name, e.User.Hostname);

                                e.Channel.Kick(e.User.Nick, Settings.Default.KickReason);
                            }
                        }
                        else
                        {
                            MessageQueueContainer.Enqueue
                            (
                                string.Format
                                (
                                    "PRIVMSG {0} :Joins {1}, Nick: {2}, Host {3}, Exploits: {4}",
                                    Settings.Default.ReportingChannel,
                                    e.Channel.Name,
                                    e.User.Nick,
                                    e.User.Hostname,
                                    exploitTypes.Any() ? exploitsString : "None"
                                )
                            );
                        }
                    }
                }
            }

            private IEnumerable<ExploitType> GetUntoleratedExploitTypes()
            {
                var exploitTypes = new List<ExploitType>();

                switch (Settings.Default.ToleranceLevel)
                {
                    case 10:
                        exploitTypes.Add(ExploitType.Banlist_Match);
                        break;

                    case 7:
                        exploitTypes.Add(ExploitType.Nick_Abuser);
                        break;

                    case 5:
                        exploitTypes.Add(ExploitType.OpenProxy);
                        exploitTypes.Add(ExploitType.OpenWingateProxy);
                        exploitTypes.Add(ExploitType.HTTPProxy);
                        exploitTypes.Add(ExploitType.SocksProxy);
                        exploitTypes.Add(ExploitType.ProxyChain);
                        break;

                    case 3:
                        exploitTypes.Add(ExploitType.IRCDrone);
                        exploitTypes.Add(ExploitType.Bottler);
                        exploitTypes.Add(ExploitType.AutomaticallyDeterminedBotnet);
                        exploitTypes.Add(ExploitType.Drones_Flooding);
                        exploitTypes.Add(ExploitType.DDOSDrone);
                        exploitTypes.Add(ExploitType.UnknownSpambotOrDrone);
                        break;
                }

                return exploitTypes.Distinct();
            }
        }
    }
}