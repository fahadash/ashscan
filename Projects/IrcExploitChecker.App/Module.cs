using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ChatSharp;
using ExploitChecker;
using ExploitChecker.Contracts;
using ExploitChecker.Services;
using Ninject;
using Ninject.Modules;

namespace IrcExploitChecker
{
    using Contracts;
    using Services;

    namespace App
    {
        using Properties;

        public class Module : NinjectModule
        {
            public override void Load()
            {
                var serverAddress = Settings.Default.Network;
                var nick = Settings.Default.Nick;
                var user = Settings.Default.Username;
                var password = string.Empty;
                var realName = string.Empty;
                var longNickLength = Settings.Default.LongNickLength;
                var blackListedHostsPath = Settings.Default.BlackListedHostsPath;
                var abusiveWordsPath = Settings.Default.AbusiveWordsPath;

                Kernel
                    .Bind<IBlackListedHostProvider>()
                    .ToMethod<IBlackListedHostProvider>
                    (
                        context =>
                        {
                            var blackListHostProvider = new BlackListHostsProvider();

                            blackListHostProvider.Load(blackListedHostsPath);

                            return blackListHostProvider;
                        }
                    );

                Kernel
                    .Bind<IAbusiveWordProvider>()
                    .ToMethod<IAbusiveWordProvider>
                    (
                        context =>
                        {
                            var abusiveWordProvider = new AbusiveWordProvider();

                            abusiveWordProvider.Load(abusiveWordsPath);

                            return abusiveWordProvider;
                        }
                    );

                Kernel
                    .Bind<IMessageQueueContainer>()
                    .To<MessageQueueContainer>();

                Kernel
                    .Bind<IIrcClientProvider>()
                    .To<IrcClientProvider>()
                    .WithConstructorArgument("serverAddress", (context_ => serverAddress))
                    .WithConstructorArgument("ircUser", (context) => new IrcUser(nick, user, password, realName));

                Kernel
                    .Bind<IHostExploitChecker>()
                    .ToMethod<IHostExploitChecker>
                    (
                        context =>
                        {
                            var blackListHostProvider = context.Kernel.Get<IBlackListedHostProvider>();

                            var barracudaExploitChecker = new BarracudaExploitChecker();
                            var droneBlExploitChecker = new DroneBlExploitChecker();
                            var efNetRblExploitChecker = new EfNetRblExploitChecker();
                            var torSectoorExploitChecker = new TorSectoorExploitChecker();
                            var blackListedHostExploitChecker = new BlackListedHostExploitChecker(blackListHostProvider);

                            return new HostExploitChecker
                            (
                                barracudaExploitChecker,
                                droneBlExploitChecker,
                                efNetRblExploitChecker,
                                torSectoorExploitChecker,
                                blackListedHostExploitChecker
                            );
                        }
                    );
                Kernel
                    .Bind<INickExploitChecker>()
                    .ToMethod<INickExploitChecker>
                    (
                        context =>
                        {
                            var abusiveWordProvider = context.Kernel.Get<IAbusiveWordProvider>();
                            var ircClientProvider = context.Kernel.Get<IIrcClientProvider>();

                            var longNickExploitChecker = new LongNickExploitChecker(longNickLength);
                            var abusiveNickExploitChecker = new AbusiveNickExploitChecker
                            (
                                abusiveWordProvider,
                                () =>
                                    ircClientProvider.IrcClient.Channels.SelectMany
                                    (
                                        c => c.UsersByMode.ContainsKey('v')
                                            ? c.UsersByMode['v']
                                            : Enumerable.Empty<IrcUser>()
                                    )
                                    .Select(a => a.Nick)
                                    .ToList()
                            );

                            return new NickExploitChecker
                            (
                                longNickExploitChecker,
                                abusiveNickExploitChecker
                            );
                        }
                    );
                Kernel
                    .Bind<ITextExploitChecker>()
                    .ToMethod<ITextExploitChecker>
                    (
                        context =>
                        {
                            return new TextExploitChecker
                            (
                            );
                        }
                    );
            }
        }
    }
}