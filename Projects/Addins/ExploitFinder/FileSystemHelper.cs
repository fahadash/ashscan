using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ExploitFinder
{
    using System.IO;

    internal class FileSystemHelper
    {
        internal static IEnumerable<string> GetBlackListedHostList()
        {
            return GetLinesFromFile(AggregateHostExploitFinder.HostBanlistFile);
        }

        internal static IEnumerable<string> GetAbusiveWordList()
        {
            return GetLinesFromFile(AggregateHostExploitFinder.NickBanlistFile);
        }

        internal static IEnumerable<string> GetLinesFromFile(string path)
        {
            if (string.IsNullOrWhiteSpace(path))
            {
                throw new InvalidOperationException("path cannot be null or empty");
            }

            if (!File.Exists(path))
            {
                throw new FileNotFoundException(path);
            }

            var lines = new List<string>();

            using (var reader = new StreamReader(path))
            {
                var line = string.Empty;

                while ((line = reader.ReadLine()) != null)
                {
                    if (!string.IsNullOrEmpty(line))
                    {
                        lines.Add(line);
                    }
                }
            }

            return lines.Distinct().ToArray();
        }
    }
}
