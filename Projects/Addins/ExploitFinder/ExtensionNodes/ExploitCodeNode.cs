namespace ExploitFinder.ExtensionNodes
{
    using System;
    using System.Linq;
    using System.Text;

    using Mono.Addins;

    [ExtensionNode("ExploitCode")]
    public class ExploitCodeNode : ExtensionNode
    {
        [NodeAttribute]
        public int Code { get; set; }

        [NodeAttribute]
        public string Description { get; set; }
    }

    public static class ExploitCodeNodeMixins
    {
        public static Exploit GetExploit(this ExploitCodeNode node)
        {
            var names = Enum.GetNames(typeof(ExploitType))
                .Select(x => x.RemoveSpecialCharacters());

            var found =
                names.FirstOrDefault(x => string.Compare(node.Description.RemoveSpecialCharacters(), x, StringComparison.OrdinalIgnoreCase)
                                          == 0);
            ExploitType type;
            if (found != null)
            {
                type = (ExploitType)Enum.Parse(typeof(ExploitType), found);
            }
            else
            {
                type = ExploitType.Other;
            }

            return new Exploit(type, node.Description);
        }

        public static string RemoveSpecialCharacters(this string data)
        {
            return data.Where(char.IsLetterOrDigit).Aggregate(new StringBuilder(), (s, c) => s.Append(c)).ToString();
        }
    }
}
