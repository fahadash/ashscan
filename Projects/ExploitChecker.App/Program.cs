using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;
using CommandLine;

namespace ExploitChecker.App
{
    using global::ExploitFinder;

    class Program
    {
        static void Main(string[] args)
        {
            var options = new Options();

            var wasParsed = Parser.Default.ParseArguments(args, options);

            if (string.IsNullOrWhiteSpace(options.InputFile))
            {
                Console.WriteLine("usage: run -i <input file>");

                return;
            }

            if (!File.Exists(options.InputFile))
            {
                Console.WriteLine("File does not exist: {0}", options.InputFile);

                return;
            }

            var lines = new List<string>();

            using (var reader = new StreamReader(options.InputFile))
            {
                var line = string.Empty;

                while ((line = reader.ReadLine()) != null)
                {
                    if (!string.IsNullOrEmpty(line))
                    {
                        lines.Add(line);
                    }
                }
            }

            Console.WriteLine("Starting the BL queries");

            var checker = new AggregateExploitChecker
            (
                new DroneBlExploitChecker(),
                new BarracudaExploitChecker(),
                new TorSectoorExploitChecker(),
                new EfNetRblExploitChecker()
            );

            // NOTE : simplify the following logic; the intent isn't very obvious -- Diabolic 15/03/2015
            var results = lines.Select(add => new AddressResult() { Host = add.ToString(), ExploitTypes = checker.Check(add) }).ToList();

            var flat = results
                .SelectMany(c => c.ExploitTypes, (e, x) => new { IP = e, ExploitType = x })
                .GroupBy(g => g.ExploitType)
                .Select(g => new { Category = g.Key.ToString(), Count = g.Count() });

            var summary = flat.Aggregate
                (
                    new StringBuilder(string.Format("Total: \t {0}\r\nExploitTypes: \t {1}\r\n", lines.Count(), results.Count(y => y.ExploitTypes.Any()))),
                    (s, x) => s.AppendFormat("{0} \t {1}\r\n", x.Category, x.Count)
                );
            var detail = results.Aggregate
                (
                    new StringBuilder(),
                    (s, r) => s.AppendFormat("({0}) - {1}\r\n", r.Host, r.ExploitTypes.Aggregate(new StringBuilder(), (b, e) => b.AppendFormat("{0},", e.ToString())))
                );

            var output = Path.Combine
                (
                    Path.GetDirectoryName(options.InputFile),
                    Path.GetFileNameWithoutExtension(options.InputFile) + "_output.txt"
                );

            using (var writer = new StreamWriter(output))
            {
                writer.Write(summary);
                writer.WriteLine();
                writer.Write(detail);
            }

            Console.WriteLine();
        }
    }
}