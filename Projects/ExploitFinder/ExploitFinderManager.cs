namespace ExploitFinder
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    using ExploitChecker;

    using global::ExploitFinder.ExtensionNodes;

    using Mono.Addins;

    internal class ExploitFinderManager
    {
      
        static ExploitFinderManager()
        {
            AddinManager.AddinLoadError += (s, e) =>
            {

            };
            AddinManager.Initialize(".", ".", ".");
            AddinManager.Registry.Update();

        }


        internal IEnumerable<IExploitFinder> GetHostExploitFinders()
        {
            var finders =
                AddinManager.GetExtensionNodes<DnsBlacklistProviderNode>("/ExploitFinder/HostExploitFinder")
                    .Select(
                        e =>
                        new DnsExploitFinder()
                            {
                                ProviderName = e.ProviderName,
                                HostSuffix = e.HostSuffix,
                                ExploitDictionary =
                                    e.ChildNodes
                                    .OfType<ExploitCodeNode>()
                                    .ToDictionary(c => c.Code, c => c.GetExploit())
                            });

            return finders.ToArray();

        }


    }
}
