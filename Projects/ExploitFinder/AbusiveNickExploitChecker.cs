using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ExploitChecker
{
    using Extensibility;

    using global::ExploitFinder;

    internal class AbusiveNickExploitFinder : BanListExploitFinder
    {
        private Func<IEnumerable<string>> nicksFunc;

        private int lengthTooLong = 20;

        internal AbusiveNickExploitFinder(string banListFile, Func<IEnumerable<string>> nicksFunc, int lengthTooLong)
            : base(banListFile)
        {
            this.nicksFunc = nicksFunc;
            this.lengthTooLong = lengthTooLong;
        }

        protected virtual Func<IEnumerable<string>> NicksFunc
        {
            get
            {
                return this.nicksFunc;
            }
        }

        public override IEnumerable<Exploit> Run(IUserInfo user)
        {
            var nick = user.Nick;
            var nicks = Enumerable.Empty<string>();

            if (nick.Length >= lengthTooLong)
            {

                if (NicksFunc != null)
                {
                    nicks = NicksFunc();
                }

                // NOTE : explain the logic here -- Diabolic 15/03/2015
                var combinedNicks =
                    nicks.Concat(BanList)
                        .Select(RemoveSpecialChars)
                        .Select(n => n.ToLower())
                        .Distinct()
                        .Where(n => !string.IsNullOrWhiteSpace(n));

                nick = RemoveSpecialChars(nick).ToLower();

                if (combinedNicks.Any(nick.Contains))
                {
                    return new[] { new Exploit(ExploitType.Nick_Abuser), new Exploit(ExploitType.Long_Nick_Alert),  };
                }
                else
                {
                    return new[] { new Exploit(ExploitType.Long_Nick_Alert), };
                }
            }
            return Enumerable.Empty<Exploit>();
        }

        private string RemoveSpecialChars(string @string)
        {
            return @string.Where(char.IsLetterOrDigit).Aggregate(new StringBuilder(), (s, c) => s.Append(c)).ToString();
        }
    }
}