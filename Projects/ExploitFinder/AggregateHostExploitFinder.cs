namespace ExploitFinder
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Runtime.InteropServices;

    using ExploitChecker;

    using Extensibility;

    using Mono.Addins;

    public class AggregateHostExploitFinder : IHostExploitFinder
    {
        private readonly IEnumerable<IExploitFinder> exploitFinders;
        private readonly ExploitFinderManager manager = new ExploitFinderManager();

        internal static string NickBanlistFile { get; set; }
        internal static string HostBanlistFile { get; set; }

        internal static BlackListedHostExploitFinder BlackListedHostExploitFinder { get; set; }
        internal static AbusiveNickExploitFinder AbusiveNickExploitFinder { get; set; }

        public AggregateHostExploitFinder(string nickBanlistFile, Func<IEnumerable<string>> voicedNicksFunc, string hostBanlistFile, int maxNickLength)
        {
            NickBanlistFile = nickBanlistFile;
            HostBanlistFile = hostBanlistFile;
           AbusiveNickExploitFinder =  new AbusiveNickExploitFinder(nickBanlistFile, voicedNicksFunc, maxNickLength);
            BlackListedHostExploitFinder = new BlackListedHostExploitFinder(hostBanlistFile);

            this.exploitFinders = this.manager.GetHostExploitFinders()
                .Concat(new IExploitFinder[] { AbusiveNickExploitFinder, BlackListedHostExploitFinder});
        }

        public IEnumerable<Exploit> Run(IUserInfo user)
        {
            return this.exploitFinders.SelectMany(e => e.Run(user));
        }
    }
}
