namespace ExploitFinder
{
    using System.Collections.Generic;
    using System.Linq;

    using ExploitChecker;

    using Extensibility;
    using System.Text.RegularExpressions;

    internal class BlackListedHostExploitFinder : BanListExploitFinder
    {
        public BlackListedHostExploitFinder(IStorageProvider banListFile)
            : base(banListFile, Constants.MaskBanlistStorageName)
        {
        }

        public override IEnumerable<Exploit> Run(IUserInfo user)
        {
            // NOTE : should ban.Equals(address) be using a regex? -- Diabolic 15/03/2015
            return this.BanList
                .Select(b => 
                    {
                        if (b.Contains("!"))
                        {
                            return b;
                        }
                        else if (b.Contains("."))
                        {
                            return string.Format("*!*@{0}", b);
                        }
                        else
                        {
                            return string.Format("{0}!*@*", b);
                        }
                    })
                .Select(WildCardToRegular)
                .Where(ban => Regex.IsMatch(user.Mask, ban))                
                .Select(_ => true).Distinct().Select(_ => new Exploit(ExploitType.Banlist_Match));
        }

        // If you want to implement both "*" and "?"
        private static string WildCardToRegular(string value)
        {
            return "^" + Regex.Escape(value).Replace("\\?", ".").Replace("\\*", ".*") + "$";
        }
    }
}