using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ExploitFinder
{
    using System.Windows.Input;

    using Extensibility;

    using Mono.Addins;

    [Extension]
    public class ExploitCommandsHandler : ICommandHandler
    {
        private IIrcController controller = null;
        public IEnumerable<string> Commands { get; private set; }

        public ExploitCommandsHandler()
        {
            this.Commands = new[] { "bannedhost", "bannedword" };
            this.controller = ExtensionManager.GetController();
        }
        public void Handle(IUserInfo oper, IEnumerable<string> tokens)
        {
            var split = tokens.ToArray();

            var command = split[0];

            switch (command)
            {
                case "bannedhost":
                    #region handle blacklist
                    if (split.Length > 2)
                    {
                        switch (split[1].ToLower())
                        {
                            case "add":
                                if (AggregateHostExploitFinder.BlackListedHostExploitFinder.Contains(split[2]))
                                {
                                    controller.Say(oper.Nick, "Host already exists.");
                                }
                                else
                                {
                                    AggregateHostExploitFinder.BlackListedHostExploitFinder.Add(split[2]);

                                    controller.Say(oper.Nick, "Host successfully added.");
                                }
                                break;

                            case "remove":
                                if (!AggregateHostExploitFinder.BlackListedHostExploitFinder.Contains(split[2]))
                                {
                                    controller.Say(oper.Nick, "Host does not exist.");
                                }
                                else
                                {
                                    AggregateHostExploitFinder.BlackListedHostExploitFinder.Remove(split[2]);

                                    controller.Say(oper.Nick, "Host successfully removed.");
                                }
                                break;

                            case "flush":
                                // TODO : persist this.blackListedHostExploitChecker -- Diabolic 15/03/2015
                                break;
                        }
                    }
                    #endregion
                    break;

                case "bannedword":
                    #region handle abusivenick
                    if (split.Length > 2)
                    {
                        switch (split[1])
                        {
                            case "add":
                                if (AggregateHostExploitFinder.AbusiveNickExploitFinder.Contains(split[2]))
                                {
                                    controller.Say(oper.Nick, "Word already exists.");
                                }
                                else
                                {
                                    AggregateHostExploitFinder.AbusiveNickExploitFinder.Add(split[2]);

                                    controller.Say(oper.Nick, "Word successfully added.");
                                }
                                break;

                            case "remove":
                                if (!AggregateHostExploitFinder.AbusiveNickExploitFinder.Contains(split[2]))
                                {
                                    controller.Say(oper.Nick, "Host does not exist.");
                                }
                                else
                                {
                                    AggregateHostExploitFinder.AbusiveNickExploitFinder.Remove(split[2]);

                                    controller.Say(oper.Nick, "Word successfully removed.");
                                }
                                break;

                            case "flush":
                                // TODO : persist this.abusiveNickExploitChecker -- Diabolic 15/03/2015
                                break;
                        }
                    }
                    #endregion
                    break;
            }
        }
    }
}
