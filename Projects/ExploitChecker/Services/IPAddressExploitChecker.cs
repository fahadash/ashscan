using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Net;
using System.Net.Sockets;

namespace ExploitChecker
{
    using Contracts;

    namespace Services
    {
        public abstract class IPAddressExploitChecker : IExploitChecker
        {
            public IPAddressExploitChecker()
                : base()
            {
            }

            public IEnumerable<ExploitType> Check(Func<string> data)
            {
                var ipAddresses = ResolveIPAddresses(data());
                var exploitTypes = TestIPAddresses(ipAddresses);

                return exploitTypes;
            }

            protected virtual IEnumerable<IPAddress> ResolveIPAddresses(string address)
            {
                var ipAddresses = new List<IPAddress>();

                var ipAddress = default(IPAddress);

                if (!IPAddress.TryParse(address, out ipAddress))
                {
                    try
                    {
                        var hostAddresses = Dns.GetHostAddresses(address);

                        ipAddresses.AddRange(hostAddresses);
                    }
                    catch
                    {
                        // TODO : log exception -- Diabolic 15/03/2015
                    }
                }
                else
                {
                    ipAddresses.Add(ipAddress);
                }

                return ipAddresses;
            }

            protected virtual IEnumerable<ExploitType> TestIPAddresses(IEnumerable<IPAddress> ipAddresses)
            {
                var exploitTypes = new List<ExploitType>();

                foreach (var ipAddress in ipAddresses.Where(a => a.AddressFamily == AddressFamily.InterNetwork))
                {
                    var addressBytes = ipAddress.GetAddressBytes();

                    exploitTypes.AddRange(TestIPAddress(addressBytes));
                }

                return exploitTypes;
            }

            protected virtual IEnumerable<ExploitType> TestIPAddress(byte[] addressBytes)
            {
                var address = FormatAddress(addressBytes);

                try
                {
                    var hostAddresses = Dns.GetHostAddresses(address);

                    var exploitTypes = CheckHostAddresses(hostAddresses);

                    return exploitTypes.ToArray();
                }
                catch
                {
                    // TODO : log exception -- Diabolic 15/03/2015

                    return Enumerable.Empty<ExploitType>();
                }
            }

            protected abstract string FormatAddress(byte[] addressBytes);

            protected abstract IEnumerable<ExploitType> CheckHostAddresses(IPAddress[] hostAddresses);
        }
    }
}