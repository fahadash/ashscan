using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ExploitChecker
{
    using Contracts;

    namespace Services
    {
        public abstract class ListProvider : IListProvider
        {
            private readonly List<string> entries;

            private string fileName;

            public ListProvider()
                : base()
            {
                this.entries = new List<string>();
            }

            protected List<string> Entries
            {
                get
                {
                    return this.entries;
                }
            }

            public void Load(string fileName)
            {
                using (var reader = new StreamReader(fileName))
                {
                    var line = string.Empty;

                    Entries.Clear();

                    while ((line = reader.ReadLine()) != null)
                    {
                        if (!string.IsNullOrEmpty(line))
                        {
                            Entries.Add(line);
                        }
                    }

                    this.fileName = fileName;
                }
            }

            public void Save(string fileName)
            {
                using (var writer = new StreamWriter(fileName))
                {
                    foreach (var entry in Entries)
                    {
                        writer.WriteLine(entry);
                    }
                }
            }

            public void Reload()
            {
                if (string.IsNullOrEmpty(this.fileName))
                {
                    throw new ArgumentNullException("fileName", "Reload cannot be called before Load.");
                }

                Load(this.fileName);
            }

            public void Flush()
            {
                if (string.IsNullOrEmpty(this.fileName))
                {
                    throw new ArgumentNullException("fileName", "Flush cannot be called before Load.");
                }

                Save(this.fileName);
            }

            public virtual bool Contains(string entry)
            {
                return Entries.Contains(entry);
            }

            public virtual void Add(string entry)
            {
                if (!Contains(entry))
                {
                    Entries.Add(entry);
                }
            }

            public virtual void Remove(string entry)
            {
                if (Contains(entry))
                {
                    Entries.Remove(entry);
                }
            }

            public virtual IEnumerable<string> GetAll()
            {
                return Entries.ToArray();
            }

            public virtual void SetAll(IEnumerable<string> banList)
            {
                Entries.Clear();
                Entries.AddRange(banList);
            }
        }
    }
}