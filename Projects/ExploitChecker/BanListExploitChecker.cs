namespace ExploitFinder
{
    using System;
    using System.Collections.Generic;
    using System.IO;

    using ExploitChecker;

    public abstract class BanListExploitChecker : IBanListExploitChecker
    {
        private List<string> banList;

        public BanListExploitChecker(string banListFile)
            : base()
        {
            if (string.IsNullOrWhiteSpace(banListFile))
            {
                throw new ArgumentNullException("banListFile cannot be null or empty");
            }

            if (!File.Exists(banListFile))
            {
               throw new FileNotFoundException(banListFile);
            }

            this.banList = new List<string>();

            using (var reader = new StreamReader(banListFile))
            {
                var line = string.Empty;

                while ((line = reader.ReadLine()) != null)
                {
                    if (!string.IsNullOrEmpty(line))
                    {
                        this.banList.Add(line);
                    }
                }
            }
        }

        protected virtual List<string> BanList
        {
            get
            {
                return this.banList;
            }
        }

        public abstract IEnumerable<ExploitType> Check(string data);

        public virtual bool Contains(string entry)
        {
            return this.BanList.Contains(entry);
        }

        public virtual void Add(string entry)
        {
            if (!this.Contains(entry))
            {
                this.BanList.Add(entry);
            }
        }

        public virtual void Remove(string entry)
        {
            if (this.Contains(entry))
            {
                this.BanList.Remove(entry);
            }
        }

        public virtual IEnumerable<string> GetAll()
        {
            return this.BanList.ToArray();
        }

        public virtual void SetAll(IEnumerable<string> banList)
        {
            this.BanList.Clear();
            this.BanList.AddRange(banList);
        }
    }
}