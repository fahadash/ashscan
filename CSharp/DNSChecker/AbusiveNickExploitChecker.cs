using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ExploitChecker
{
    public class AbusiveNickExploitChecker : IExploitChecker
    {
        private List<string> bannedWords;

        private Func<IEnumerable<string>> nicksFunc;

        public AbusiveNickExploitChecker(string banListFile, Func<IEnumerable<string>> nicksFunc)
            : base()
        {
            if (string.IsNullOrWhiteSpace(banListFile))
            {
                throw new ArgumentNullException("banListFile cannot be null or empty");
            }

            if (!File.Exists(banListFile))
            {
                throw new FileNotFoundException(banListFile);
            }

            this.bannedWords = new List<string>();
            this.nicksFunc = nicksFunc;

            var line = string.Empty;

            using (var reader = new StreamReader(banListFile))
            {
                while ((line = reader.ReadLine()) != null)
                {
                    this.bannedWords.Add(line);
                }
            }
        }

        protected IEnumerable<string> BannedWords
        {
            get
            {
                return this.bannedWords;
            }
        }

        protected Func<IEnumerable<string>> NicksFunc
        {
            get
            {
                return this.nicksFunc;
            }
        }

        public IEnumerable<ExploitType> Check(string nick)
        {
            var nicks = Enumerable.Empty<string>();

            if (NicksFunc != null)
            {
                nicks = NicksFunc();
            }

            // NOTE : explain the logic here -- Diabolic 15/03/2015
            var combinedNicks = nicks
                .Concat(BannedWords)
                .Select(RemoveSpecialChars)
                .Select(n => n.ToLower())
                .Distinct()
                .Where(n => !string.IsNullOrWhiteSpace(n));

            nick = RemoveSpecialChars(nick).ToLower();

            if (combinedNicks.Any(nick.Contains))
            {
                return new[] { ExploitType.Nick_Abuser };
            }

            return Enumerable.Empty<ExploitType>();
        }

        private string RemoveSpecialChars(string @string)
        {
            return @string.Where(char.IsLetterOrDigit).Aggregate(new StringBuilder(), (s, c) => s.Append(c)).ToString();
        }
    }
}