using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ExploitChecker
{
    public class BanListExploitChecker : IExploitChecker
    {
        private List<string> banList;

        public BanListExploitChecker(string banListFile)
            : base()
        {
            if (string.IsNullOrWhiteSpace(banListFile))
            {
                throw new ArgumentNullException("banListFile cannot be null or empty");
            }

            if (!File.Exists(banListFile))
            {
               throw new FileNotFoundException(banListFile);
            }

            this.banList = new List<string>();

            var line = string.Empty;

            using (var reader = new StreamReader(banListFile))
            {
                while ((line = reader.ReadLine()) != null)
                {
                    if (!string.IsNullOrEmpty(line))
                    {
                        this.banList.Add(line);
                    }
                }
            }
        }

        protected List<string> BanList
        {
            get
            {
                return this.banList;
            }
        }

        public IEnumerable<ExploitType> Check(string address)
        {
            // NOTE : should ban.Equals(address) be using a regex? -- Diabolic 15/03/2015
            return BanList.Where(ban => ban.Equals(address)).Select(_ => ExploitType.Banlist_Match).Distinct();
        }
    }
}