using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Net;
using System.Net.Sockets;

namespace ExploitChecker
{
    public abstract class IPAddressExploitChecker : IExploitChecker
    {
        public IPAddressExploitChecker()
            : base()
        {
        }

        public IEnumerable<ExploitType> Check(string address)
        {
            var ipAddresses = ResolveIPAddresses(address);
            var exploitTypes = TestIPAddresses(ipAddresses);

            return exploitTypes;
        }

        private IEnumerable<IPAddress> ResolveIPAddresses(string address)
        {
            var ipAddresses = new List<IPAddress>();

            var ipAddress = default(IPAddress);

            if (!IPAddress.TryParse(address, out ipAddress))
            {
                try
                {
                    var hostAddresses = Dns.GetHostAddresses(address);

                    ipAddresses.AddRange(hostAddresses);
                }
                catch
                {
                    // TODO : log exception -- Diabolic 15/03/2015
                }
            }
            else
            {
                ipAddresses.Add(ipAddress);
            }

            return ipAddresses;
        }

        private IEnumerable<ExploitType> TestIPAddresses(IEnumerable<IPAddress> ipAddresses)
        {
            var exploitTypes = new List<ExploitType>();

            foreach (var ipAddress in ipAddresses.Where(a => a.AddressFamily == AddressFamily.InterNetwork))
            {
                var addressBytes = ipAddress.GetAddressBytes();

                exploitTypes.AddRange(TestIPAddress(addressBytes));
            }

            return exploitTypes;
        }

        protected abstract IEnumerable<ExploitType> TestIPAddress(byte[] addressBytes);
    }
}