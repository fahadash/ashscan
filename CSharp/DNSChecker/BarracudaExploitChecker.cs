using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;

namespace ExploitChecker
{
    public class BarracudaExploitChecker : IPAddressExploitChecker
    {
        public BarracudaExploitChecker()
            : base()
        {
        }

        protected override IEnumerable<ExploitType> TestIPAddress(byte[] addressBytes)
        {
            var address = string.Format
            (
                "{0}.{1}.{2}.{3}.ban.barracudacentral.org",
                Convert.ToInt32(addressBytes[3]),
                Convert.ToInt32(addressBytes[2]),
                Convert.ToInt32(addressBytes[1]),
                Convert.ToInt32(addressBytes[0])
            );

            try
            {
                var hostAddresses = Dns.GetHostAddresses(address);

                var exploitTypes = hostAddresses
                    .Select(x => Convert.ToInt32(x.GetAddressBytes()[3]))
                    .Where(x => x == 2)
                    .Select(x => ExploitType.Barracuda_Blacklisted);

                return exploitTypes.ToArray();
            }
            catch
            {
                // TODO : log exception -- Diabolic 15/03/2015

                return Enumerable.Empty<ExploitType>();
            }
        }
    }
}