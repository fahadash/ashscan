using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace IRCExploitChecker
{
    using System.IO;
    using System.Runtime.InteropServices;
    using System.Threading;

    using ChatSharp;

    using DNSChecker;

    using IRCExploitChecker.Properties;

    class Program
    {
        static void Main(string[] args)
        {

            var dontReport = new[] { Settings.Default.ReportChannel };
            var verbose = false;
            var client = new IrcClient(Settings.Default.Network, new IrcUser(Settings.Default.Nick,
                Settings.Default.Username));
            var channels = Settings.Default.JoinChannels.Split(',').Where(c => c.StartsWith("#"));
            client.ConnectionComplete += (s, e) =>
                {
                    client.JoinChannel(Settings.Default.ReportChannel);
                    channels.ToList().ForEach(client.JoinChannel);

                    var identify = "nickserv identify " + Settings.Default.NickservPassword;
                    client.SendRawMessage("MODE {0} +iRB-ws", Settings.Default.Nick);
                    client.SendRawMessage(identify);
                };

            var drone = new DroneBlChcker();
            var barracuda = new BarracudaChecker();
            var torSectoor = new TorSectoorChecker();
            var banlist = new BanlistChecker(Settings.Default.BannedHostsPath);
            var effnet = new EfnetRblChecker();
            var checker = new AggregateChecker(drone, torSectoor, effnet, banlist);
       
            var nickAbuse = new NickAbuserChecker(
                Settings.Default.BannedWordsPath,
                () =>
                client.Channels.SelectMany(
                    c => c.UsersByMode.ContainsKey('v') ? c.UsersByMode['v'] : Enumerable.Empty<IrcUser>())
                    .Select(a => a.Nick)
                    .ToList());

            client.RawMessageRecieved += (s, e) => Console.WriteLine(e.Message);
            client.UserJoinedChannel += (s, e) =>
                {
                    if (!dontReport.Contains(e.Channel.Name.ToLower()))
                    {
                        var result = checker.Check(e.User.Hostname);



                        var extraExploits = new List<ExploitType>();

                        if (e.User.Nick.Length > 20)
                        {
                           extraExploits.Add(ExploitType.Long_Nick_Alert);
                            extraExploits.AddRange(nickAbuse.Check(e.User.Nick));
                        }

                        var finalResult = result.Concat(extraExploits);
                        var flat = finalResult.Aggregate(
                            new StringBuilder(),
                            (b, ee) => b.AppendFormat("{0}, ", ee.ToString()));

                       var exploitsString = 
                        flat.ToString().TrimEnd(',', ' ');

                        if (verbose || result.Any())
                        {
                            client.Channels[Settings.Default.ReportChannel].SendMessage(
                            string.Format("Joins {0}, Nick: {1}, Host {2}, Exploits: {3}",
                            e.Channel.Name, e.User.Nick, e.User.Hostname, finalResult.Any() ? exploitsString : "None"));
                        }

                        if (finalResult.Any())
                        {
                            var intolerance = GetExploitsNotTolerated();

                            if (finalResult.Any(intolerance.Contains))
                            {
                                client.Channels[Settings.Default.ReportChannel].SendMessage(
                                  string.Format("KICK Trigger: in {0}, Nick: {1}, Host {2}, Exploits: {3}",
                                  e.Channel.Name, e.User.Nick, e.User.Hostname, finalResult.Any() ? exploitsString : "None"));

                                if (e.Channel != null && e.Channel.UsersByMode.ContainsKey('o')
                                    && e.Channel.UsersByMode['o'].Any(x => x.Nick == client.User.Nick))
                                {
                                    client.SendRawMessage("MODE {0} +b *!*@{1}", e.Channel.Name, e.User.Hostname);
                                    e.Channel.Kick(e.User.Nick, Settings.Default.KickReason);
                                    
                                }
                            }
                           
                        }


                    }

                };

            var operators = Settings.Default.BotOperators.Split(',').Select(o => o.Trim());

            client.UserMessageRecieved += (s, e) =>
                {
                    try
                    {
                    if (e.PrivateMessage != null)
                    {
                        if (operators.Any(x => x.ToLower().Equals(e.PrivateMessage.User.Nick.ToLower())))
                        {
                            var m = e.PrivateMessage.Message;

                            var split = m.Split(' ');

                            if (split[0] == "join")
                            {
                                client.JoinChannel(split[1]);
                            }

                            if (split[0] == "part")
                            {
                                client.PartChannel(split[1]);
                            }

                            if (split[0] == "check")
                            {
                                var result = checker.Check(split[1]);
                                var flat = result.Aggregate(
                            new StringBuilder(),
                            (b, ee) => b.AppendFormat("{0},", ee.ToString())).ToString();

                                client.Channels[Settings.Default.ReportChannel].SendMessage(
                                    string.Format(
                                        "Manual check requested by {0}, Host {1}, Exploits: {2}",
                                        e.PrivateMessage.User.Nick,
                                        split[1],
                                        flat)); 
                                client.SendRawMessage("PRIVMSG " + e.PrivateMessage.User.Nick + " " + flat);
                            }

                            if (split[0] == "tolerance")
                            {
                                if (split.Length > 1)
                                {
                                    int newlevel;
                                    if (!int.TryParse(split[1], out newlevel) || newlevel < 0 || newlevel > 10)
                                    {
                                       client.SendRawMessage("PRIVMSG {0} :Invalid level. Choose between 0-10", e.PrivateMessage.User.Nick);
                                    }
                                    else
                                    {
                                        Settings.Default.ToleranceLevel = newlevel;
                                        Settings.Default.Save();
                                        client.SendRawMessage("PRIVMSG {0} :Current Tolerance level is now set to: {1}", e.PrivateMessage.User.Nick, Settings.Default.ToleranceLevel);
                                    }
                                }
                                else
                                {
                                    client.SendRawMessage("PRIVMSG {0} :Current Tolerance level is: {1}", e.PrivateMessage.User.Nick, Settings.Default.ToleranceLevel);
                                }
                            }
                            if (split[0] == "bannedhost")
                            {
                                if (split.Length > 2)
                                {
                                    var command = split[1];

                                    if (command.ToLower() == "add")
                                    {
                                        var list = GetBannedHosts();
                                        if (list.Contains(split[2]))
                                        {
                                            client.SendRawMessage("PRIVMSG {0} :Host already exists.", e.PrivateMessage.User.Nick);
                                        }
                                        else
                                        {
                                            list.Add(split[2]);
                                            var newlist = string.Join(Environment.NewLine, list);

                                            if (File.Exists(Settings.Default.BannedHostsPath))
                                            {
                                                File.Delete(Settings.Default.BannedHostsPath);
                                            }

                                            using (var writer = new StreamWriter(Settings.Default.BannedHostsPath))
                                            {
                                                writer.Write(newlist);
                                            }
                                            banlist.SetNewBanlist(list);
                                            client.SendRawMessage("PRIVMSG {0} :Host successfully added.", e.PrivateMessage.User.Nick);
                                        }
                                    }
                                    if (command.ToLower() == "remove")
                                    {
                                        var list = GetBannedHosts();
                                        if (!list.Contains(split[2]))
                                        {
                                            client.SendRawMessage("PRIVMSG {0} :Host does not exist.", e.PrivateMessage.User.Nick);
                                        }
                                        else
                                        {
                                            list.Remove(split[2]);
                                            var newlist = string.Join(Environment.NewLine, list);

                                            if (File.Exists(Settings.Default.BannedHostsPath))
                                            {
                                                File.Delete(Settings.Default.BannedHostsPath);
                                            }

                                            using (var writer = new StreamWriter(Settings.Default.BannedHostsPath))
                                            {
                                                writer.Write(newlist);
                                            }
                                            banlist.SetNewBanlist(list);
                                            client.SendRawMessage("PRIVMSG {0} :Host successfully removed.", e.PrivateMessage.User.Nick);
                                        }
                                    }
                                }
                            }
                            if (split[0] == "bannedwords")
                            {
                                if (split.Length > 2)
                                {
                                    var command = split[1];

                                    if (command.ToLower() == "add")
                                    {
                                        var list = GetBannedWords();
                                        if (list.Contains(split[2]))
                                        {
                                            client.SendRawMessage("PRIVMSG {0} :Word already exists.", e.PrivateMessage.User.Nick);
                                        }
                                        else
                                        {
                                            list.Add(split[2]);
                                            var newlist = string.Join(Environment.NewLine, list);

                                            if (File.Exists(Settings.Default.BannedWordsPath))
                                            {
                                                File.Delete(Settings.Default.BannedWordsPath);
                                            }

                                            using (var writer = new StreamWriter(Settings.Default.BannedWordsPath))
                                            {
                                                writer.Write(newlist);
                                            }
                                            nickAbuse.SetNewBanlist(list);
                                            client.SendRawMessage("PRIVMSG {0} :Word successfully added.", e.PrivateMessage.User.Nick);
                                        }
                                    }
                                    if (command.ToLower() == "remove")
                                    {
                                        var list = GetBannedWords();
                                        if (!list.Contains(split[2]))
                                        {
                                            client.SendRawMessage("PRIVMSG {0} :Host does not exist.", e.PrivateMessage.User.Nick);
                                        }
                                        else
                                        {
                                            list.Remove(split[2]);
                                            var newlist = string.Join(Environment.NewLine, list);

                                            if (File.Exists(Settings.Default.BannedWordsPath))
                                            {
                                                File.Delete(Settings.Default.BannedWordsPath);
                                            }

                                            using (var writer = new StreamWriter(Settings.Default.BannedWordsPath))
                                            {
                                                writer.Write(newlist);
                                            }
                                            nickAbuse.SetNewBanlist(list);
                                            client.SendRawMessage("PRIVMSG {0} :Word successfully removed.", e.PrivateMessage.User.Nick);
                                        }
                                    }
                                }
                            }

                            if (split[0] == "verbose")
                            {
                                if (split[1] != null)
                                {
                                    if (split[1] == "off")
                                    {
                                        verbose = false;
                                    }
                                    else
                                    {
                                        verbose = true;
                                    }
                                }
                            }
                        }
                    }
                    }
                    catch (Exception)
                    {

                        //throw;
                    }

                };

            client.ConnectAsync();

            while (true)
            {
                Thread.Sleep(1000);
            }
        }

        static IEnumerable<ExploitType> GetExploitsNotTolerated()
        {
            var level = Settings.Default.ToleranceLevel;

            var list = new List<ExploitType>();

            if (level < 10)
            {
                list.Add(ExploitType.Banlist_Match);
            }
            if (level < 7)
            {
                list.Add(ExploitType.Nick_Abuser);
            }
            if (level < 5)
            {
                list.Add(ExploitType.OpenProxy);

                list.Add(ExploitType.OpenWingateProxy);

                list.Add(ExploitType.HTTPProxy);


                list.Add(ExploitType.SocksProxy);
                list.Add(ExploitType.ProxyChain);
            }
            if (level < 3)
            {
                list.Add(ExploitType.IRCDrone);

                list.Add(ExploitType.Bottler);

                list.Add(ExploitType.AutomaticallyDeterminedBotnet);


                list.Add(ExploitType.Drones_Flooding);
                list.Add(ExploitType.DDOSDrone);
                list.Add(ExploitType.UnknownSpambotOrDrone);
            }

            return list.Distinct();
        }

        static List<string> GetBannedHosts()
        {
            string filePath = Settings.Default.BannedHostsPath;
            if (string.IsNullOrWhiteSpace(filePath))
            {
                throw new InvalidOperationException("filePath cannot be null or empty");
            }

            if (!File.Exists(filePath))
            {
                throw new FileNotFoundException(filePath);
            }


            IEnumerable<string> lines = null;

            using (var reader = new StreamReader(filePath))
            {
                var data = reader.ReadToEnd();

                lines = data.Split(new string[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries);
            }

            return lines.Distinct().ToList();
        }

        static List<string> GetBannedWords()
        {
            string filePath = Settings.Default.BannedWordsPath;
            if (string.IsNullOrWhiteSpace(filePath))
            {
                throw new InvalidOperationException("filePath cannot be null or empty");
            }

            if (!File.Exists(filePath))
            {
                throw new FileNotFoundException(filePath);
            }


            IEnumerable<string> lines = null;

            using (var reader = new StreamReader(filePath))
            {
                var data = reader.ReadToEnd();

                lines = data.Split(new string[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries);
            }

            return lines.Distinct().ToList();
        }
    }
}
