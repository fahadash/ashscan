using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace IRCExploitChecker
{
    using System.Collections.Concurrent;
    using System.Configuration;
    using System.IO;
    using System.Reactive.Concurrency;
    using System.Reactive.Linq;
    using System.Reactive.Subjects;
    using System.Runtime.InteropServices;
    using System.Threading;

    using ChatSharp;

    using DNSChecker;

    using IRCExploitChecker.Properties;

    class Program
    {
        private static object fslock = new object();
        static void Main(string[] args)
        {
            var rawMessageQueue = new ConcurrentQueue<string>();

            var dontReport = new[] { Settings.Default.ReportChannel };
            var verbose = false;
            var client = new IrcClient(Settings.Default.Network, new IrcUser(Settings.Default.Nick,
                Settings.Default.Username));
            var channels = Settings.Default.JoinChannels.Split(',').Where(c => c.StartsWith("#"));
            client.ConnectionComplete += (s, e) =>
                {
                    client.JoinChannel(Settings.Default.ReportChannel);

                    var identify = "nickserv identify " + Settings.Default.NickservPassword;
                    client.SendRawMessage(":MODE {0} +iRCB-ws", Settings.Default.Nick);
                    client.SendRawMessage(identify);

                    Thread.Sleep(100);
                    channels.ToList().ForEach(client.JoinChannel);
                };

            var bannedHostsPath = File.Exists(Settings.Default.BannedHostsPath)
                                      ? Settings.Default.BannedHostsPath
                                      : ConfigurationManager.AppSettings["BannedHostsPath"];
            var bannedWordsPath = File.Exists(Settings.Default.BannedWordsPath)
                                      ? Settings.Default.BannedWordsPath
                                      : ConfigurationManager.AppSettings["BannedWordsPath"];
            

            var drone = new DroneBlChcker();
            var barracuda = new BarracudaChecker();
            var torSectoor = new TorSectoorChecker();
            var banlist = new BanlistChecker(bannedHostsPath);
            var effnet = new EfnetRblChecker();
            var checker = new AggregateChecker(drone, torSectoor, effnet, banlist);
       
            var nickAbuse = new NickAbuserChecker(
                bannedWordsPath,
                () =>
                client.Channels.SelectMany(
                    c => c.UsersByMode.ContainsKey('v') ? c.UsersByMode['v'] : Enumerable.Empty<IrcUser>())
                    .Select(a => a.Nick)
                    .ToList());

            client.RawMessageRecieved += (s, e) => Console.WriteLine(e.Message);
            client.UserJoinedChannel += (s, e) =>
                {
                    if (!dontReport.Contains(e.Channel.Name.ToLower()))
                    {
                        var result = checker.Check(e.User.Hostname);



                        var extraExploits = new List<ExploitType>();

                        if (e.User.Nick.Length > 20)
                        {
                           extraExploits.Add(ExploitType.Long_Nick_Alert);
                            extraExploits.AddRange(nickAbuse.Check(e.User.Nick));
                        }

                        var finalResult = result.Concat(extraExploits);
                        var flat = finalResult.Aggregate(
                            new StringBuilder(),
                            (b, ee) => b.AppendFormat("{0}, ", ee.ToString()));

                       var exploitsString = 
                        flat.ToString().TrimEnd(',', ' ');

                       if (verbose || finalResult.Any())
                        {

                            var intolerance = GetExploitsNotTolerated();

                            if (finalResult.Any(intolerance.Contains))
                            {
                                rawMessageQueue.Enqueue(
                                    string.Format(
                                        "PRIVMSG {0} :KICK Trigger: in {1}, Nick: {2}, Host {3}, Exploits: {4}",
                                        Settings.Default.ReportChannel,
                                        e.Channel.Name,
                                        e.User.Nick,
                                        e.User.Hostname,
                                        finalResult.Any() ? exploitsString : "None"));

                                if (e.Channel != null && e.Channel.UsersByMode.ContainsKey('o')
                                    && e.Channel.UsersByMode['o'].Any(x => x.Nick == client.User.Nick))
                                {
                                    client.SendRawMessage("MODE {0} +b *!*@{1}", e.Channel.Name, e.User.Hostname);
                                    e.Channel.Kick(e.User.Nick, Settings.Default.KickReason);

                                }
                            }
                            else
                            {
                                rawMessageQueue.Enqueue(
                                    string.Format(
                                        "PRIVMSG {0} :Joins {1}, Nick: {2}, Host {3}, Exploits: {4}",
                                        Settings.Default.ReportChannel,
                                        e.Channel.Name,
                                        e.User.Nick,
                                        e.User.Hostname,
                                        finalResult.Any() ? exploitsString : "None"));

                            }
                        }
                    }

                };

            var operators = Settings.Default.BotOperators.Split(',').Select(o => o.Trim());

            client.UserMessageRecieved += (s, e) =>
                {
                    try
                    {
                    if (e.PrivateMessage != null)
                    {
                        if (operators.Any(x => x.ToLower().Equals(e.PrivateMessage.User.Nick.ToLower())))
                        {
                            var m = e.PrivateMessage.Message;

                            var split = m.Split(' ');

                            if (split[0] == "join")
                            {
                                client.JoinChannel(split[1]);
                            }

                            if (split[0] == "part")
                            {
                                client.PartChannel(split[1]);
                            }

                            if (split[0] == "check")
                            {
                                var result = checker.Check(split[1]);
                                var flat = result.Aggregate(
                            new StringBuilder(),
                            (b, ee) => b.AppendFormat("{0},", ee.ToString())).ToString();

                                client.Channels[Settings.Default.ReportChannel].SendMessage(
                                    string.Format(
                                        "Manual check requested by {0}, Host {1}, Exploits: {2}",
                                        e.PrivateMessage.User.Nick,
                                        split[1],
                                        flat)); 
                                rawMessageQueue.Enqueue("PRIVMSG " + e.PrivateMessage.User.Nick + " :" + flat);
                            }

                            if (split[0] == "tolerance")
                            {
                                if (split.Length > 1)
                                {
                                    int newlevel;
                                    if (!int.TryParse(split[1], out newlevel) || newlevel < 0 || newlevel > 10)
                                    {
                                        rawMessageQueue.Enqueue(string.Format("PRIVMSG {0} :Invalid level. Choose between 0-10", e.PrivateMessage.User.Nick));
                                    }
                                    else
                                    {
                                        Settings.Default.ToleranceLevel = newlevel;
                                        Settings.Default.Save();
                                        rawMessageQueue.Enqueue(string.Format("PRIVMSG {0} :Current Tolerance level is now set to: {1}", e.PrivateMessage.User.Nick, Settings.Default.ToleranceLevel));
                                    }
                                }
                                else
                                {
                                    rawMessageQueue.Enqueue(string.Format("PRIVMSG {0} :Current Tolerance level is: {1}", e.PrivateMessage.User.Nick, Settings.Default.ToleranceLevel));
                                }
                            }
                            if (split[0] == "bannedhost")
                            {
                                if (split.Length > 2)
                                {
                                    var command = split[1];

                                    if (command.ToLower() == "add")
                                    {
                                        var list = GetBannedHosts();
                                        if (list.Contains(split[2]))
                                        {
                                            rawMessageQueue.Enqueue(string.Format("PRIVMSG {0} :Host already exists.", e.PrivateMessage.User.Nick));
                                        }
                                        else
                                        {
                                            list.Add(split[2]);
                                            var newlist = string.Join(Environment.NewLine, list);

                                            if (File.Exists(Settings.Default.BannedHostsPath))
                                            {
                                                File.Delete(Settings.Default.BannedHostsPath);
                                            }

                                            using (var writer = new StreamWriter(Settings.Default.BannedHostsPath))
                                            {
                                                writer.Write(newlist);
                                            }
                                            banlist.SetNewBanlist(list);
                                            rawMessageQueue.Enqueue(string.Format("PRIVMSG {0} :Host successfully added.", e.PrivateMessage.User.Nick));
                                        }
                                    }
                                    if (command.ToLower() == "remove")
                                    {
                                        var list = GetBannedHosts();
                                        if (!list.Contains(split[2]))
                                        {
                                            rawMessageQueue.Enqueue(string.Format("PRIVMSG {0} :Host does not exist.", e.PrivateMessage.User.Nick));
                                        }
                                        else
                                        {
                                            list.Remove(split[2]);
                                            var newlist = string.Join(Environment.NewLine, list);

                                            if (File.Exists(Settings.Default.BannedHostsPath))
                                            {
                                                File.Delete(Settings.Default.BannedHostsPath);
                                            }

                                            using (var writer = new StreamWriter(Settings.Default.BannedHostsPath))
                                            {
                                                writer.Write(newlist);
                                            }
                                            banlist.SetNewBanlist(list);
                                            rawMessageQueue.Enqueue(string.Format("PRIVMSG {0} :Host successfully removed.", e.PrivateMessage.User.Nick));
                                        }
                                    }
                                }
                            }
                            if (split[0] == "bannedwords")
                            {
                                if (split.Length > 2)
                                {
                                    var command = split[1];

                                    if (command.ToLower() == "add")
                                    {
                                        var list = GetBannedWords();
                                        if (list.Contains(split[2]))
                                        {
                                            rawMessageQueue.Enqueue(string.Format("PRIVMSG {0} :Word already exists.", e.PrivateMessage.User.Nick));
                                        }
                                        else
                                        {
                                            list.Add(split[2]);
                                            var newlist = string.Join(Environment.NewLine, list);

                                            if (File.Exists(Settings.Default.BannedWordsPath))
                                            {
                                                File.Delete(Settings.Default.BannedWordsPath);
                                            }

                                            lock (fslock)
                                            {
                                                using (var writer = new StreamWriter(Settings.Default.BannedWordsPath))
                                                {
                                                    writer.Write(newlist);
                                                }
                                            }
                                            nickAbuse.SetNewBanlist(list);
                                            rawMessageQueue.Enqueue(string.Format("PRIVMSG {0} :Word successfully added.", e.PrivateMessage.User.Nick));
                                        }
                                    }
                                    if (command.ToLower() == "remove")
                                    {
                                        var list = GetBannedWords();
                                        if (!list.Contains(split[2]))
                                        {
                                            rawMessageQueue.Enqueue(string.Format("PRIVMSG {0} :Host does not exist.", e.PrivateMessage.User.Nick));
                                        }
                                        else
                                        {
                                            list.Remove(split[2]);
                                            var newlist = string.Join(Environment.NewLine, list);

                                            if (File.Exists(Settings.Default.BannedWordsPath))
                                            {
                                                File.Delete(Settings.Default.BannedWordsPath);
                                            }
                                            lock (fslock)
                                            {
                                                using (var writer = new StreamWriter(Settings.Default.BannedWordsPath))
                                                {
                                                    writer.Write(newlist);
                                                }
                                            }
                                            nickAbuse.SetNewBanlist(list);
                                            rawMessageQueue.Enqueue(string.Format("PRIVMSG {0} :Word successfully removed.", e.PrivateMessage.User.Nick));
                                        }
                                    }
                                }
                            }

                            if (split[0] == "verbose")
                            {
                                if (split[1] != null)
                                {
                                    if (split[1] == "off")
                                    {
                                        verbose = false;
                                    }
                                    else
                                    {
                                        verbose = true;
                                    }
                                }
                            }
                            if (split[0] == "reload")
                            {
                                nickAbuse.SetNewBanlist(GetBannedWords());
                                banlist.SetNewBanlist(GetBannedHosts());
                                rawMessageQueue.Enqueue(string.Format("PRIVMSG {0} :Lists reloaded.", e.PrivateMessage.User.Nick));
                            }
                            if (split[0] == "ban")
                            {
                                if (split.Length == 3 && split[1].StartsWith("#"))
                                {
                                    var nick = split[2];
                                    var channel = split[1];

                                    client.WhoIs(nick,
                                        whois =>
                                            {
                                                if (whois != null && whois.User!=null && !string.IsNullOrWhiteSpace(whois.User.Hostname))
                                                {
                                                    rawMessageQueue.Enqueue(string.Format("MODE {0} +b *!*@{1}", channel, whois.User.Hostname));
                                                }
                                            } );
                                }
                            }
                            if (split[0] == "unban")
                            {
                                if (split.Length == 3 && split[1].StartsWith("#"))
                                {
                                    var nick = split[2];
                                    var channel = split[1];

                                    client.WhoIs(nick,
                                        whois =>
                                        {
                                            if (whois != null && whois.User != null && !string.IsNullOrWhiteSpace(whois.User.Hostname))
                                            {
                                                rawMessageQueue.Enqueue(string.Format("MODE {0} -b *!*@{1}", channel, whois.User.Hostname));
                                            }
                                        });
                                }
                            }
                            if (split[0] == "voice")
                            {
                                if (split.Length == 3 && split[1].StartsWith("#"))
                                {
                                    var nick = split[2];
                                    var channel = split[1];
                                    rawMessageQueue.Enqueue(string.Format("MODE {0} +v {1}", channel, nick));
                                }
                            }
                            if (split[0] == "devoice")
                            {
                                if (split.Length == 3 && split[1].StartsWith("#"))
                                {
                                    var nick = split[2];
                                    var channel = split[1];
                                    rawMessageQueue.Enqueue(string.Format("MODE {0} -v {1}", channel, nick));
                                }
                            }

                            if (split[0] == "kick")
                            {
                                if (split.Length >= 3 && split[1].StartsWith("#"))
                                {
                                    var nick = split[2];
                                    var channel = split[1];
                                    var reason = split.Length > 3
                                                     ? string.Join(" ", split.Skip(3))
                                                     : Settings.Default.KickReason;
                                    var chan =
                                        client
                                        .Channels
                                        .FirstOrDefault(c => string.Compare(c.Name, channel, StringComparison.OrdinalIgnoreCase) == 0);

                                    if (chan != null)
                                    {
                                        if (chan.UsersByMode.ContainsKey('o')
                                            && chan.UsersByMode['o'].Any(
                                                u =>
                                                string.Compare(
                                                    u.Nick,
                                                    client.User.Nick,
                                                    StringComparison.OrdinalIgnoreCase) == 0))
                                        {
                                            chan.Kick(nick, reason);
                                        }
                                        else
                                        {
                                            rawMessageQueue.Enqueue(string.Format("PRIVMSG {0} :I am not an op there.", e.PrivateMessage.User.Nick));
                                        }
                                    }
                                }
                            }

                        }
                    }
                    }
                    catch (Exception)
                    {

                        //throw;
                    }

                };

            var tokenSource = new CancellationTokenSource();
            var raw = Observable.Create<string>(
                (o, t) => Task.Factory.StartNew(
                    () =>
                        {
                            while (!t.IsCancellationRequested)
                            {
                                Thread.Sleep(TimeSpan.FromSeconds(1.0));

                                string message;

                                if (rawMessageQueue.TryDequeue(out message) && !string.IsNullOrWhiteSpace(message))
                                {
                                    o.OnNext(message);
                                }
                            }
                        }, t)).Publish();

            raw
             .ObserveOn(Scheduler.Default)
             .Subscribe(client.SendRawMessage);
            raw.Connect();
            client.ConnectAsync();

            while (true)
            {
                Thread.Sleep(2000);
            }
        }

        static IEnumerable<ExploitType> GetExploitsNotTolerated()
        {
            var level = Settings.Default.ToleranceLevel;

            var list = new List<ExploitType>();

            if (level < 10)
            {
                list.Add(ExploitType.Banlist_Match);
            }
            if (level < 7)
            {
                list.Add(ExploitType.Nick_Abuser);
            }
            if (level < 5)
            {
                list.Add(ExploitType.OpenProxy);

                list.Add(ExploitType.OpenWingateProxy);

                list.Add(ExploitType.HTTPProxy);


                list.Add(ExploitType.SocksProxy);
                list.Add(ExploitType.ProxyChain);
            }
            if (level < 3)
            {
                list.Add(ExploitType.IRCDrone);

                list.Add(ExploitType.Bottler);

                list.Add(ExploitType.AutomaticallyDeterminedBotnet);


                list.Add(ExploitType.Drones_Flooding);
                list.Add(ExploitType.DDOSDrone);
                list.Add(ExploitType.UnknownSpambotOrDrone);
            }

            return list.Distinct();
        }

        static List<string> GetBannedHosts()
        {
            string filePath = Settings.Default.BannedHostsPath;
            if (string.IsNullOrWhiteSpace(filePath))
            {
                throw new InvalidOperationException("filePath cannot be null or empty");
            }

            if (!File.Exists(filePath))
            {
                throw new FileNotFoundException(filePath);
            }


            IEnumerable<string> lines = null;

            lock (fslock)
            {
                using (var reader = new StreamReader(filePath))
                {
                    var data = reader.ReadToEnd();

                    lines = data.Split(new string[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries);
                }
            }
            return lines.Distinct().ToList();
        }

        static List<string> GetBannedWords()
        {
            string filePath = Settings.Default.BannedWordsPath;
            if (string.IsNullOrWhiteSpace(filePath))
            {
                throw new InvalidOperationException("filePath cannot be null or empty");
            }

            if (!File.Exists(filePath))
            {
                throw new FileNotFoundException(filePath);
            }


            IEnumerable<string> lines = null;

            lock (fslock)
            {
                using (var reader = new StreamReader(filePath))
                {
                    var data = reader.ReadToEnd();

                    lines = data.Split(new string[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries);
                }
            }

            return lines.Distinct().ToList();
        }
    }
}
